#!/usr/bin/env node
const https = require('https');
const url = require('url');
const fs = require('fs');

const { readJSON } = require('./utils.js');

const FIGMA_CONFIG_PATH = './.figmaconfig.json';
const END_POINT = '/v1/images/';
const HOST_NAME = 'api.figma.com';

const DEFAULT_EXPORT_SETTINGS = {
  format: 'svg',
  svg_include_id: true,
  svg_simplify_stroke: true,
  svg_outline_text: false,
};
const PROTOCOL = 'https';

// keep promises here in order to be able to exit when all promises are done
const promises = [];

const getFileInfoFromFigma = (requestUrl, figmaToken) => {
  return new Promise((resolve, reject) => {
    https
      .get(
        {
          hostname: requestUrl.hostname,
          path: requestUrl.path,
          headers: {
            'X-FIGMA-TOKEN': figmaToken,
          },
        },
        res => {
          res.setEncoding('utf8');
          let body = '';
          res.on('data', data => {
            body += data;
          });
          res.on('end', () => {
            body = JSON.parse(body);
            resolve(body);
          });
        },
      )
      .on('error', error => {
        logError('Something went wrong!');
        logError(error);
        reject(error);
      });
  });
};

const downloadFile = (downloadUrl, dest) => {
  return new Promise((resolve, reject) => {
    https
      .get(downloadUrl, response => {
        const file = fs.createWriteStream(dest);
        response
          .on('data', chunk => {
            file.write(chunk);
          })
          .on('end', () => {
            file.end(() => {
              resolve(logSuccess(`Download done for ${dest}!`));
            });
          });
      })
      .on('error', error => {
        logError('Something went wrong!');
        logError(error);
        reject(error);
      });
  });
};

const logSuccess = message => {
  // eslint-disable-next-line no-console
  console.log('\x1b[33m%s\x1b[0m', message);
};

const logError = error => {
  // eslint-disable-next-line no-console
  console.log('\x1b[31m%s\x1b[0m', error);
};

const checkForWrongParameters = figmaConfig => {
  // check for wrong parameters from command line
  const wrongParams = process.argv
    .slice(2)
    .filter(parameter => figmaConfig.components[parameter] === undefined);

  if (wrongParams.length > 0) {
    wrongParams.forEach(wrongParam => {
      logError(
        `Found no component named ${wrongParam} - you should add it to .figmaconfig file`,
      );
    });
    logError('Process will exit - please check your parameters');
    process.exit(-2);
  }
};

const figmaToken = process.env.FIGMA_TOKEN;
if (!figmaToken) {
  logError(
    'Figma token not found. You need to set it in an environment variable before running this script',
  );
  process.exit(-3);
}
// expected at least one argument (one file to sync)
if (process.argv.length <= 2) {
  logError('You have to pass at least one component to sync. Refer to the README if you feel confused.');
  process.exit(-1);
} else {
  const figmaConfig = readJSON(FIGMA_CONFIG_PATH);
  const assetsRootFolder = figmaConfig.assets_root_folder;

  checkForWrongParameters(figmaConfig);

  for (let i = 2; i < process.argv.length; i += 1) {
    const componentName = process.argv[i];
    const componentConfig = figmaConfig.components[componentName];
    const figmaFile = componentConfig.file || figmaConfig.default_file;
    // MERGE EXPORT SETTINGS
    const exportSettings = { ...DEFAULT_EXPORT_SETTINGS, ...componentConfig.export_settings || {} };
    const imageId = decodeURIComponent(componentConfig.node_id);
    const pathToImage = `${assetsRootFolder}${componentConfig.relative_path}.${exportSettings.format}`;

    const requestUrl = url.parse(
      url.format({
        protocol: PROTOCOL,
        hostname: HOST_NAME,
        pathname: END_POINT + figmaFile,
        query: {
          ...exportSettings,
          ids: imageId,
        },
      }),
    );

    // add each promise to array in order to track when promises are done
    promises.push(
      getFileInfoFromFigma(requestUrl, figmaToken).then(figmaResponseBody => {
        if (figmaResponseBody.err === null) {
          return downloadFile(
            figmaResponseBody.images[imageId],
            pathToImage,
          ).catch(() => {
            logError(`Download failed for ${componentName}. Please try again`);
          });
        }
        logError(figmaResponseBody.err);
        return new Promise((resolve) => resolve(null));
      }).catch(() => {
        logError(`Export failed for ${componentName}. Please try again`);
      }),
    );
  }
  // wait for all promises to end, then close the script
  Promise.all(promises)
    .then(childPromises => Promise.all(childPromises))
    .then(() => process.exit());
}